import pdb
# -*- coding: utf-8 -*-
"""PredMort.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X4_A_TPF6UKjUqGK644icBi1rS9AsvhZ
"""

import pandas as pd
import numpy as np
import os
import numpy as np
import matplotlib.pyplot as plt
import math
import pickle
import json
import torch
import torch.nn as nn
from itertools import chain
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,confusion_matrix

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

with open("/home/amridul/mimic/RL-for-Sepsis/feedback_classifier_DT/logs/json/observations.json") as f:
  obs=json.load(f)

X=np.array(obs[0])
y=np.array(obs[1])
y = list(chain(*y))

y=np.where(y==1.0,0,y)
y=np.where(y==-1.0,1,y)

X = torch.tensor(X, dtype=torch.float32)
y = torch.tensor(y, dtype=torch.long)


y = torch.nn.functional.one_hot(y, 2)
y= y.to(torch.float32).clone().detach().requires_grad_(True)

X_train,X_val,y_train,y_val=train_test_split(X,y,test_size=0.3,shuffle=True,random_state=1)

class Mortality(nn.Module):
    def __init__(self, input_dim):
        super(Mortality, self).__init__()
        self.layer1 = nn.Linear(input_dim, 250)
        self.bn1 = nn.BatchNorm1d(250)
        self.dp1 = nn.Dropout(0.2)
        self.layer2 = nn.Linear(250, 150)
        self.bn2 = nn.BatchNorm1d(150)
        self.dp2 = nn.Dropout(0.2)
        self.layer3 = nn.Linear(150, 75)
        self.bn3 = nn.BatchNorm1d(75)
        self.dp3 = nn.Dropout(0.2)
        self.layer4 = nn.Linear(75,25)
        self.bn4 = nn.BatchNorm1d(25)
        self.dp4 = nn.Dropout(0.2)
        self.layer5 = nn.Linear(25,2)
        self.relu = nn.ReLU()
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
        x = self.layer1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.dp1(x)
        x = self.layer2(x)
        x = self.bn2(x)
        x = self.relu(x)
        x = self.dp2(x)
        x = self.layer3(x)
        x = self.bn3(x)
        x = self.relu(x)
        x = self.dp3(x)
        x = self.layer4(x)
        x = self.bn4(x)
        x = self.relu(x)
        x = self.dp4(x)
        x = self.layer5(x)
        x = self.softmax(x)
        return x

input_dim = X.shape[1]
model = Mortality(input_dim)
model.to(device)
model.load_state_dict(torch.load('/home/amridul/mimic/RL-for-Sepsis/feedback_classifier_DT/nnclsfier/NNMortalityborder.pth'))


#To make the prediction
with torch.no_grad():
    y_pred = torch.argmax(model(X_val.to(device)), dim=1).cpu().numpy()
    # y_pred = model(X_val.to(device)).detach().cpu().numpy()
# pdb.set_trace()
# accuracy = accuracy_score(y_val.detach().numpy(), y_pred)
accuracy = accuracy_score(np.argmax(y_val.detach().numpy(), axis = 1), y_pred)

# accuracy = accuracy_score(y_val.detach().numpy(), np.argmax(y_pred, axis=1))

print(accuracy)